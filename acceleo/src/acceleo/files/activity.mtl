[comment encoding = UTF-8 /]
[module activity('http://www.eclipse.org/uml2/4.0.0/UML')]

[template public generateActivity(anActivity : Activity)]
[file (anActivity.name.concat('.rb'), false, 'UTF-8')]
# The activity "[anActivity.name/]" has [anActivity.eAllContents(ActivityNode)->size()/] nodes and [anActivity.eAllContents(ControlFlow)->size()/] control flows 
[if (anActivity.eAllContents(InitialNode)->first().oclIsUndefined())]
 [genBehaviorActivity(anActivity)/]
[else]
  [let theInitialNode : InitialNode= anActivity.eAllContents(InitialNode)->first()]
  # The initial node is called "[theInitialNode.name/]"
  [theInitialNode.nextActivityNode()/]
[genRequires(theInitialNode)/]
[genOpaqueActions(theInitialNode)/]
[genCallBehaviorActions(theInitialNode)/]
def [anActivity.name/]
  [genActivity(theInitialNode)/]
end
  [/let]
[/if]
[/file]
[/template]


[template public genBehaviorActivity(anActivity : Activity) post(trim())]
def [anActivity.name/][if (anActivity.ownedParameter->asSet()->isEmpty()._not())]([genInputActivityParameterNodes(anActivity)/])[/if]
  [genActivityParameterNodeInitialization(anActivity)/]
  [let theInitialNode : ActivityParameterNode=anActivity.node->select(apn : ActivityNode | apn.oclIsTypeOf(ActivityParameterNode))->asSequence()->first()]
  [theInitialNode.nextActivityNodeInBehavior()/]
[/let]
end
[/template]

[template public genInputActivityParameterNodes(anActivity : Activity) post(trim())]
[for(activityParameter : Parameter | anActivity.ownedParameter)]
[if (activityParameter.direction.toString().contains('in'))][activityParameter.name.toLowerFirst()/][/if][if (activityParameter.followingSiblings()->isEmpty())][elseif (activityParameter.followingSiblings()->first().eGet('direction').toString().contains('in'))], [/if]
[/for]
[/template]

[template public genActivityParameterNodeInitialization(anActivity : Activity)]
[for(activityParameter : Parameter | anActivity.ownedParameter)]
[if (activityParameter.direction.toString().contains('in'))]an[activityParameter.name/] = [activityParameter.name.toLowerFirst()/]
[elseif (activityParameter.direction.toString().contains('return'))]an[activityParameter.name/] = nil[/if][if (activityParameter.followingSiblings()->isEmpty())][/if]
[/for]
[/template]

[template public nextActivityNodeInBehavior(anActivityNode : ActivityNode) post(trim())]
[for(aControlFlow: ControlFlow | anActivityNode.outgoing)]
 [generateActionCallInBehavior(anActivityNode)/]
[if (aControlFlow.target.oclIsTypeOf(ActivityParameterNode))][printOutputActivityParameterNode(aControlFlow)/][else]# [aControlFlow.name/][/if]
[(nextActivityNodeInBehavior(aControlFlow.target))/]
[/for]
[/template]

[template public generateActionCallInBehavior(anActivityNode : ActivityNode) post(trim())]
[if (anActivityNode.oclIsTypeOf(OpaqueAction))][anActivityNode.name/]()
[elseif (anActivityNode.oclIsTypeOf(ValueSpecificationAction))][anActivityNode.name/]()
[elseif (anActivityNode.oclIsTypeOf(CallOperationAction))][anActivityNode.name/]()
[elseif (anActivityNode.oclIsTypeOf(CallBehaviorAction)._and( anActivityNode.eGet('behavior').oclIsUndefined()._not() ))][anActivityNode.name/]()[/if]
[/template]

[template public printOutputActivityParameterNode(aControlFlow : ControlFlow) post(trim())]
[if (aControlFlow.target.oclIsTypeOf(ActivityParameterNode))]return an[aControlFlow.target.eGet('parameter').name/][/if]
[/template]

[template public nextActivityNode(anActivityNode : ActivityNode)]
[for(aControlFlow: ControlFlow | anActivityNode.outgoing)]
    [printNameAndAction(anActivityNode)/]
    [if (aControlFlow.target.outgoing->isEmpty())][printTerminatingNode(aControlFlow)/][else]#[aControlFlow.name/][/if]
	[(nextActivityNode(aControlFlow.target))/]
[/for]
[/template]

[template public printNameAndAction(anActivityNode : ActivityNode) post(trim())]
#[anActivityNode.name/]
     [if (anActivityNode.oclIsTypeOf(ValueSpecificationAction))]#[anActivityNode.name/] -> Output Pin: [printReturnParameter(anActivityNode)/], Value: [anActivityNode.eGet('value').name/]=[anActivityNode.eGet('value').eGet('value')/]
     [elseif (anActivityNode.oclIsTypeOf(CallOperationAction)._and( anActivityNode.eGet('onPort').oclIsUndefined()._not()._and( anActivityNode.eGet('operation').oclIsUndefined()._not() )))]#[(anActivityNode.name)/] -> On port: [(anActivityNode.eGet('onPort').name)/], Operation: [anActivityNode.eGet('operation').name/]([printOperationParameters(anActivityNode)/]), Result: [printReturnParameter(anActivityNode)/]
     [elseif (anActivityNode.oclIsTypeOf(CallBehaviorAction)._and( anActivityNode.eGet('behavior').oclIsUndefined()._not() ))]#[(anActivityNode.name)/] -> Operation: [anActivityNode.eGet('behavior').name/][/if]
[/template]

[template public printOperationParameters(anActivityNode : ActivityNode) post(trim())]
[for(parameter : Element | anActivityNode.ownedElement)][if (parameter.oclIsUndefined()._not()._and( parameter.oclIsTypeOf(InputPin) ))][parameter.eGet('type').name/] [parameter.eGet('name')/][if (parameter.followingSiblings()->isEmpty()._not())], [/if][/if][/for]
[/template]

[template public printReturnParameter(anActivityNode : ActivityNode) post(trim())]
[for(parameter : Element | anActivityNode.ownedElement)][if (parameter.oclIsUndefined()._not()._and( parameter.oclIsTypeOf(OutputPin) ))][parameter.eGet('name')/][/if][/for]
[/template]

[template public printTerminatingNode(aControlFlow : ControlFlow)]
[if (aControlFlow.target.oclIsTypeOf(FlowFinalNode))]    #[aControlFlow.target.name/][elseif (aControlFlow.target.oclIsTypeOf(ActivityFinalNode))]    #[aControlFlow.target.name/][/if]
[/template]

[template public genRequires(anActivityNode : ActivityNode)]
[if anActivityNode.oclIsTypeOf(OpaqueAction)]
[if anActivityNode.oclAsType(OpaqueAction).input->size() > 0]
require_relative('[anActivityNode.oclAsType(OpaqueAction).input->first().type.name/].rb')
[/if]
[if anActivityNode.oclAsType(OpaqueAction).output->size() > 0]
require_relative('[anActivityNode.oclAsType(OpaqueAction).output->first().type.name/].rb')
[/if]
[if anActivityNode.oclAsType(OpaqueAction).output->size() > 0]
[for(anObjectFlow: ObjectFlow | anActivityNode.oclAsType(OpaqueAction).output->first().outgoing)][genRequires(anObjectFlow.target.oclAsType(InputPin).owner.oclAsType(OpaqueAction))/][/for][/if]
[/if]
[for(aControlFlow: ControlFlow | anActivityNode.outgoing)][genRequires(aControlFlow.target)/][/for]
[/template]

[template public genOpaqueActions(anActivityNode : ActivityNode)]
[if anActivityNode.oclIsTypeOf(OpaqueAction)]
def [anActivityNode.name/][if anActivityNode.oclAsType(OpaqueAction).input->size() > 0]([anActivityNode.oclAsType(OpaqueAction).input->first().name.toLower()/])[/if]
  #TODO fill in function
  [if anActivityNode.oclAsType(OpaqueAction).output->size() > 0]
  [anActivityNode.oclAsType(OpaqueAction).output->first().name.toLower()/] = [anActivityNode.oclAsType(OpaqueAction).output->first().type.name/].new
  [anActivityNode.oclAsType(OpaqueAction).output->first().name.toLower()/]
[/if]
end

[if anActivityNode.oclAsType(OpaqueAction).output->size() > 0][for(anObjectFlow: ObjectFlow | anActivityNode.oclAsType(OpaqueAction).output->first().outgoing)][genOpaqueActions(anObjectFlow.target.oclAsType(InputPin).owner.oclAsType(OpaqueAction))/][/for][/if][/if]
[for(aControlFlow: ControlFlow | anActivityNode.outgoing)][genOpaqueActions(aControlFlow.target)/][/for]
[/template]

[template public genCallBehaviorActions(anActivityNode : ActivityNode)]
[if anActivityNode.oclIsTypeOf(CallBehaviorAction)]
def [anActivityNode.eGet('behavior').name/][if (anActivityNode.eGet('behavior').ownedParameter->asSet()->isEmpty()._not())]([genInputActivityParameterNodes(anActivityNode.eGet('behavior').oclAsType(Activity))/])[/if]
  [genActivityParameterNodeInitialization(anActivityNode.eGet('behavior').oclAsType(Activity))/]
  [let theInitialNode : ActivityParameterNode=anActivityNode.eGet('behavior').oclAsType(Activity).node->select(apn : ActivityNode | apn.oclIsTypeOf(ActivityParameterNode))->asSequence()->first()]
  [theInitialNode.nextActivityNodeInBehavior()/]
[/let]
end
[/if]
[for(aControlFlow: ControlFlow | anActivityNode.outgoing)][genCallBehaviorActions(aControlFlow.target)/][/for]
[/template]

[template public genActivity(anActivityNode : ActivityNode)]
[if anActivityNode.oclIsTypeOf(CallBehaviorAction)][printReturnActivityParameterNodeIfExists(anActivityNode)/][anActivityNode.name/]([genInputActivityParameterNodes(anActivityNode.eGet('behavior').oclAsType(Activity))/])[/if]
[if anActivityNode.oclIsTypeOf(OpaqueAction)][if anActivityNode.oclAsType(OpaqueAction).output->size() > 0][anActivityNode.oclAsType(OpaqueAction).output->first().outgoing.oclAsType(ObjectFlow).name.toLower()/] = [/if][anActivityNode.name/]([if anActivityNode.oclAsType(OpaqueAction).input->size() > 0][anActivityNode.oclAsType(OpaqueAction).input->first().incoming.oclAsType(ObjectFlow).name.toLower()/][/if])
[if anActivityNode.oclAsType(OpaqueAction).output->size() > 0][for(anObjectFlow: ObjectFlow | anActivityNode.oclAsType(OpaqueAction).output->first().outgoing) separator('\n')][genActivity(anObjectFlow.target.oclAsType(InputPin).owner.oclAsType(OpaqueAction))/][/for][/if][/if]
[for(aControlFlow: ControlFlow | anActivityNode.outgoing)][genActivity(aControlFlow.target)/][/for]
[/template]

[template printReturnActivityParameterNodeIfExists(anActivityNode : ActivityNode) post(trim())]
[if (anActivityNode.eGet('behavior').ownedParameter->asSet()->isEmpty()._not())][for (param : Parameter | anActivityNode.eGet('behavior').ownedParameter->asSet())][if (param.direction.toString().contains('return'))][param.name.toLowerFirst()/] = [/if][/for][/if]
[/template] 