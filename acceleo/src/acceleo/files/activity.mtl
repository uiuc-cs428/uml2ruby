[comment encoding = UTF-8 /]
[module activity('http://www.eclipse.org/uml2/4.0.0/UML')]

[template public generateActivity(anActivity : Activity)]
[file (anActivity.name.concat('.rb'), false, 'UTF-8')]
[genComments(anActivity)/]
# The activity "[anActivity.name/]" has [anActivity.eAllContents(ActivityNode)->size()/] nodes and [anActivity.eAllContents(ControlFlow)->size()/] control flows 
[if (anActivity.eAllContents(InitialNode)->first().oclIsUndefined())]
 [genBehaviorActivity(anActivity)/]
[else]
  [let theInitialNode : InitialNode= anActivity.eAllContents(InitialNode)->first()]
  # The initial node is called "[theInitialNode.name/]"
  [theInitialNode.nextActivityNode()/]
[genRequires(theInitialNode)/]
[comment genCallBehaviorActions(theInitialNode)/]
[genMethodsFromActions(theInitialNode)/]
def [anActivity.name/]
  [genActivity(theInitialNode)/]
end
  [/let]
[/if]
[/file]
[/template]


[template public genBehaviorActivity(anActivity : Activity) post(trim())]
def [anActivity.name/][if (not anActivity.ownedParameter->asSet()->isEmpty())]([genInputActivityParameterNodes(anActivity)/])[/if]
  [genActivityParameterNodeInitialization(anActivity)/]
  [let theInitialNode : ActivityParameterNode=anActivity.node->select(apn : ActivityNode | apn.oclIsTypeOf(ActivityParameterNode) and apn.eGet('parameter').direction.toString().contains('in'))->asSequence()->first()]
  [theInitialNode.nextActivityNodeInBehavior()/]
[/let]
end
[/template]

[template public genInputActivityParameterNodes(anActivity : Activity) post(trim())]
[for(activityParameter : Parameter | anActivity.ownedParameter)]
[if (activityParameter.direction.toString().contains('in'))][activityParameter.name.toLowerFirst()/][/if][if (activityParameter.followingSiblings()->isEmpty())][elseif (activityParameter.followingSiblings()->first().eGet('direction').toString().contains('in'))], [/if]
[/for]
[/template]

[template public genActivityParameterNodeInitialization(anActivity : Activity)]
[for(activityParameter : Parameter | anActivity.ownedParameter)]
[if (activityParameter.direction.toString().contains('in'))]an[activityParameter.name/] = [activityParameter.name.toLowerFirst()/]
[elseif (activityParameter.direction.toString().contains('return'))]an[activityParameter.name/] = nil[/if][if (activityParameter.followingSiblings()->isEmpty())][/if]
[/for]
[/template]

[template public nextActivityNodeInBehavior(anActivityNode : ActivityNode) post(trim())]
[for(aControlFlow: ControlFlow | anActivityNode.outgoing.oclAsType(ControlFlow))]
 [generateActionCallInBehavior(anActivityNode)/]
[if (aControlFlow.target.oclIsTypeOf(ActivityParameterNode))][printOutputActivityParameterNode(aControlFlow)/][else]# [aControlFlow.name/][/if]
[(nextActivityNodeInBehavior(aControlFlow.target))/]
[/for]
[/template]

[template public generateActionCallInBehavior(anActivityNode : ActivityNode) post(trim())]
[if (anActivityNode.oclIsTypeOf(OpaqueAction))][anActivityNode.name/]()
[elseif (anActivityNode.oclIsTypeOf(ValueSpecificationAction))][anActivityNode.name/]()
[elseif (anActivityNode.oclIsTypeOf(CallOperationAction))][anActivityNode.name/]()
[elseif (anActivityNode.oclIsTypeOf(CallBehaviorAction) and ( not anActivityNode.eGet('behavior').oclIsUndefined() ))][anActivityNode.name/]()[/if]
[/template]

[template public printOutputActivityParameterNode(aControlFlow : ControlFlow) post(trim())]
[if (aControlFlow.target.oclIsTypeOf(ActivityParameterNode))]return an[aControlFlow.target.eGet('parameter').name/][/if]
[/template]

[template public nextActivityNode(anActivityNode : ActivityNode)]
[for(aControlFlow: ControlFlow | anActivityNode.outgoing.oclAsType(ControlFlow))]
    [printNameAndAction(anActivityNode)/]
    [if (aControlFlow.target.outgoing->isEmpty())][printTerminatingNode(aControlFlow)/][else]#[aControlFlow.name/][/if]
	[(nextActivityNode(aControlFlow.target))/]
[/for]
[/template]

[template public printNameAndAction(anActivityNode : ActivityNode) post(trim())]
#[anActivityNode.name/]
     [if (anActivityNode.oclIsTypeOf(ValueSpecificationAction))]#[anActivityNode.name/] -> Output Pin: [printReturnParameter(anActivityNode)/], Value: [anActivityNode.eGet('value').name/]=[anActivityNode.eGet('value').eGet('value')/]
     [elseif (anActivityNode.oclIsTypeOf(CallOperationAction) and ( ( not anActivityNode.eGet('operation').oclIsUndefined() )))][genClassMethod(anActivityNode)/]
     [elseif (anActivityNode.oclIsTypeOf(CallBehaviorAction) and ( not anActivityNode.eGet('behavior').oclIsUndefined() ))]#[(anActivityNode.name)/] -> Operation: [anActivityNode.eGet('behavior').name/][/if]
[/template]

[template public genClassMethod(anActivityNode : ActivityNode)]
[printReturnParameter(anActivityNode)/][anActivityNode.eGet('operation').class.name/].[anActivityNode.eGet('operation').name/]([printOperationParameters(anActivityNode)/])
[/template]

[template public printControlFlowGuard(aControlFlow : ControlFlow) post(trim())]
[if not (aControlFlow.guard->isEmpty())]
[if (aControlFlow.guard.name = 'else')]
#else
[else]
#if [aControlFlow.guard.name/] == [aControlFlow.guard.eGet('value')/]
[/if]
[/if]
[/template]

[template public printOperationParameters(anActivityNode : ActivityNode) post(trim())]
[for(parameter : Element | anActivityNode.ownedElement)]
[if (not parameter.oclIsUndefined() and parameter.oclIsTypeOf(InputPin))][parameter.eGet('name')/][/if][/for]
[/template]

[template public printReturnParameter(anActivityNode : ActivityNode) post(trim())]
[for(parameter : Element | anActivityNode.ownedElement)][if (not parameter.oclIsUndefined() and ( parameter.oclIsTypeOf(OutputPin) ))][parameter.eGet('name')/]=[/if][/for]
[/template]

[template public printTerminatingNode(aControlFlow : ControlFlow)]
[if (aControlFlow.target.oclIsTypeOf(FlowFinalNode))]    #[aControlFlow.target.name/][elseif (aControlFlow.target.oclIsTypeOf(ActivityFinalNode))]    #[aControlFlow.target.name/][/if]
[/template]

[template public genRequires(anActivityNode : ActivityNode)]
[if anActivityNode.oclIsTypeOf(OpaqueAction)]
[if anActivityNode.oclAsType(OpaqueAction).input->size() > 0]
[if not (anActivityNode.oclAsType(OpaqueAction).input->first().type.toString().contains('String') or
     anActivityNode.oclAsType(OpaqueAction).input->first().type.toString().contains('Integer') or
     anActivityNode.oclAsType(OpaqueAction).input->first().type.toString().contains('Real') or
     anActivityNode.oclAsType(OpaqueAction).input->first().type.toString().contains('Boolean')
)]
require_relative('[anActivityNode.oclAsType(OpaqueAction).input->first().type.name/].rb')
[/if]
[/if]
[if anActivityNode.oclAsType(OpaqueAction).output->size() > 0]
[if not (anActivityNode.oclAsType(OpaqueAction).output->first().type.toString().contains('String') or
     anActivityNode.oclAsType(OpaqueAction).output->first().type.toString().contains('Integer') or
     anActivityNode.oclAsType(OpaqueAction).output->first().type.toString().contains('Real') or
     anActivityNode.oclAsType(OpaqueAction).output->first().type.toString().contains('Boolean')
)]
require_relative('[anActivityNode.oclAsType(OpaqueAction).output->first().type.name/].rb')
[/if]
[/if]
[if anActivityNode.oclAsType(OpaqueAction).output->size() > 0]
[for(anObjectFlow: ObjectFlow | anActivityNode.oclAsType(OpaqueAction).output->first().outgoing.oclAsType(ObjectFlow))][genRequires(anObjectFlow.target.oclAsType(InputPin).owner.oclAsType(OpaqueAction))/][/for][/if]
[/if]
[for(aControlFlow: ControlFlow | anActivityNode.outgoing.oclAsType(ControlFlow))][genRequires(aControlFlow.target)/][/for]
[/template]

[comment genOpaqueActions adds function definitions for all of the opaque/value-specification actions in the diagram (can actually include manual/external ruby code)/]
[template public genMethodsFromActions(anActivityNode : ActivityNode)]
[if anActivityNode.oclIsTypeOf(OpaqueAction)]
[let anOpaqueAction : OpaqueAction = anActivityNode]
def [anOpaqueAction.print()/][if anOpaqueAction.input->size() > 0]([anOpaqueAction.input->first().name.toLower()/])[/if]
  [if (anOpaqueAction.output->size() > 0)]
  [comment anOpaqueAction.output->first().type.toString()/]
  [if (anOpaqueAction.output->first().type.toString().contains('String'))]
  [anOpaqueAction.output->first().name.toLower()/] = ""
  [elseif (anOpaqueAction.output->first().type.toString().contains('Integer'))]
  [anOpaqueAction.output->first().name.toLower()/] = 0
  [elseif (anOpaqueAction.output->first().type.toString().contains('Real'))]
  [anOpaqueAction.output->first().name.toLower()/] = 0.0
  [elseif (anOpaqueAction.output->first().type.toString().contains('Boolean'))]
  [anOpaqueAction.output->first().name.toLower()/] = false
  [else]
  [anOpaqueAction.output->first().name.toLower()/] = [anOpaqueAction.output->first().type.name/].new
  [/if]
  [if anOpaqueAction.validLanguage('ruby')]
[anOpaqueAction._body->at(anOpaqueAction.language.indexOf('ruby')->first())/]
  [elseif anOpaqueAction.validLanguage('Ruby')]
[anOpaqueAction._body->at(anOpaqueAction.language.indexOf('Ruby')->first())/]
  [else]
  #TODO fill in function
  [/if]
  [anOpaqueAction.output->first().name.toLower()/]
  [/if]
end

[if anOpaqueAction.output->size() > 0]
[for(anObjectFlow: ObjectFlow | anOpaqueAction.output->first().outgoing.oclAsType(ObjectFlow))]
[genMethodsFromActions(anObjectFlow.target.oclAsType(InputPin).owner.oclAsType(OpaqueAction))/]
[/for]
[/if]
[/let]
[elseif (anActivityNode.oclIsTypeOf(ValueSpecificationAction))]
[let valSpecAction : ValueSpecificationAction = anActivityNode]
def [anActivityNode.print()/]
  #TODO fill in function
  [if (valSpecAction.value.oclIsUndefined()) ] nil
  [else]
  [if valSpecAction.value.toString().contains('LiteralStringImpl')]
  [valSpecAction.value.name/] = "[valSpecAction.value.eGet('value')/]"
  [elseif valSpecAction.value.toString().contains('LiteralBooleanImpl')]
  [valSpecAction.value.name/] = [valSpecAction.value.eGet('value')/]
  [else]
  [valSpecAction.value.name/] = [valSpecAction.value.eGet('value')/]
  [/if]
  [valSpecAction.value.name/]
  [/if]
end
[/let]
[/if]

[for(aControlFlow: ControlFlow | anActivityNode.outgoing.oclAsType(ControlFlow))][genMethodsFromActions(aControlFlow.target)/][/for]
[/template]


[template public genCallBehaviorActions(anActivityNode : ActivityNode)]
[if anActivityNode.oclIsTypeOf(CallBehaviorAction)]
def [anActivityNode.eGet('behavior').name/][if (not (anActivityNode.eGet('behavior').ownedParameter->asSet()->isEmpty()))]([genInputActivityParameterNodes(anActivityNode.eGet('behavior').oclAsType(Activity))/])[/if]
  [genActivityParameterNodeInitialization(anActivityNode.eGet('behavior').oclAsType(Activity))/]
  [let theInitialNode : ActivityParameterNode=anActivityNode.eGet('behavior').oclAsType(Activity).node->select(apn : ActivityNode | apn.oclIsTypeOf(ActivityParameterNode))->asSequence()->first()]
  [theInitialNode.nextActivityNodeInBehavior()/]
[/let]
end
[/if]
[for(aControlFlow: ControlFlow | anActivityNode.outgoing.oclAsType(ControlFlow))][genCallBehaviorActions(aControlFlow.target)/][/for]
[/template]

[template public printReturnActivityParameterNodeIfExists(anActivityNode : ActivityNode) post(trim())]
[if (not (anActivityNode.eGet('behavior').ownedParameter->asSet()->isEmpty()))][for (param : Parameter | anActivityNode.eGet('behavior').ownedParameter->asSet())][if (param.direction.toString().contains('return'))][param.name.toLowerFirst()/] = [/if][/for][/if]
[/template] 

[query public validLanguage(anOpaqueAction : OpaqueAction, languageName : String) : Boolean = 
  anOpaqueAction.language->includes(languageName) and not anOpaqueAction._body->at(anOpaqueAction.language.indexOf(languageName)->first()).oclIsInvalid()
/]

[template public genActivity(anActivityNode : ActivityNode) post(trim())]
[if anActivityNode.oclIsTypeOf(CallBehaviorAction)][printReturnActivityParameterNodeIfExists(anActivityNode)/][anActivityNode.name/]([genInputActivityParameterNodes(anActivityNode.eGet('behavior').oclAsType(Activity))/])[/if]
[if anActivityNode.oclIsTypeOf(OpaqueAction)]
[let anOpaqueAction : OpaqueAction = anActivityNode]
[if anOpaqueAction.output->size() > 0]
[anOpaqueAction.output->first().outgoing.oclAsType(ObjectFlow).name.toLower()/] = [/if][anActivityNode.print()/]([if anOpaqueAction.input->size() > 0][anOpaqueAction.input->first().incoming.oclAsType(ObjectFlow).name.toLower()/]
[/if])
[if anOpaqueAction.output->size() > 0]
[for(anObjectFlow: ObjectFlow | anOpaqueAction.output->first().outgoing.oclAsType(ObjectFlow))][genActivity(anObjectFlow.target.oclAsType(InputPin).owner.oclAsType(OpaqueAction))/]
[/for]
[/if]
[/let]
[elseif (anActivityNode.oclIsTypeOf(ValueSpecificationAction))]
[anActivityNode.print()/]
[/if]

[comment: Print control flow guards/]
[for (aControlFlow: ControlFlow | anActivityNode.outgoing.oclAsType(ControlFlow))]
[if not (aControlFlow.guard.oclIsUndefined() = false and aControlFlow.guard.name = 'else')]
[printControlFlowGuard(aControlFlow)/]
[(genActivity(aControlFlow.target))/]
[/if]
[/for]
[comment: Ensure that the else clause is always printed last/]
[for (aControlFlow: ControlFlow | anActivityNode.outgoing.oclAsType(ControlFlow))]
[if (aControlFlow.guard.oclIsUndefined() = false and aControlFlow.guard.name = 'else')]
[printControlFlowGuard(aControlFlow)/]
[(genActivity(aControlFlow.target))/]
[/if]
[/for][/template]

[template public print(anActivityNode : ActivityNode)]
[anActivityNode.name.replaceAll(' ', '_')/]
[/template]

[comment: Print all of the comments for the given activity/]
[template public genComments(anActivity : Activity)]
[for (aComment: Comment | anActivity.ownedComment)]
#[aComment._body/]
[/for]
[/template]
