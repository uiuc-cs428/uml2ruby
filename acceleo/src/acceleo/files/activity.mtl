[comment encoding = UTF-8 /]
[module activity('http://www.eclipse.org/uml2/4.0.0/UML')]

[template public generateActivity(anActivity : Activity)]
[file (anActivity.name.concat('.rb'), false, 'UTF-8')]
  #The activity "[anActivity.name/]" has [anActivity.eAllContents(ActivityNode)->size()/] nodes and [anActivity.eAllContents(ControlFlow)->size()/] control flows
  [let theInitialNode : InitialNode= anActivity.eAllContents(InitialNode)->first()]
  #The initial node is called "[theInitialNode.name/]"
  [theInitialNode.nextActivityNode()/]
[genRequires(theInitialNode)/]
[genOpaqueActions(theInitialNode)/]
def [anActivity.name/]
  [genActivity(theInitialNode)/]
end
  [/let]

[/file]
[/template]

[template public nextActivityNode(anActivityNode : ActivityNode)]
[for(aControlFlow: ControlFlow | anActivityNode.outgoing)]
    [printNameAndAction(anActivityNode)/]
    [if (aControlFlow.target.outgoing->isEmpty())][printTerminatingNode(aControlFlow)/][else]#[aControlFlow.name/][/if]
	[(nextActivityNode(aControlFlow.target))/]
[/for]
[/template]

[template public printNameAndAction(anActivityNode : ActivityNode) post(trim())]
#[anActivityNode.name/]
     [if (anActivityNode.oclIsTypeOf(ValueSpecificationAction))]#[anActivityNode.name/] -> Output Pin: [printReturnParameter(anActivityNode)/], Value: [anActivityNode.eGet('value').name/]=[anActivityNode.eGet('value').eGet('value')/]
     [elseif (anActivityNode.oclIsTypeOf(CallOperationAction)._and( anActivityNode.eGet('onPort').oclIsUndefined()._not()._and( anActivityNode.eGet('operation').oclIsUndefined()._not() )))]#[(anActivityNode.name)/] -> On port: [(anActivityNode.eGet('onPort').name)/], Operation: [anActivityNode.eGet('operation').name/]([printOperationParameters(anActivityNode)/]), Result: [printReturnParameter(anActivityNode)/]
     [elseif (anActivityNode.oclIsTypeOf(CallBehaviorAction)._and( anActivityNode.eGet('onPort').oclIsUndefined()._not()._and( anActivityNode.eGet('behavior').oclIsUndefined()._not() )))]#[(anActivityNode.name)/] -> On port: [(anActivityNode.eGet('onPort').name)/], Operation: [anActivityNode.eGet('behavior').name/][/if]
[/template]

[template public printOperationParameters(anActivityNode : ActivityNode) post(trim())]
[for(parameter : Element | anActivityNode.ownedElement)][if (parameter.oclIsUndefined()._not()._and( parameter.oclIsTypeOf(InputPin) ))][parameter.eGet('type').name/] [parameter.eGet('name')/][if (parameter.followingSiblings()->isEmpty()._not())], [/if][/if][/for]
[/template]

[template public printReturnParameter(anActivityNode : ActivityNode) post(trim())]
[for(parameter : Element | anActivityNode.ownedElement)][if (parameter.oclIsUndefined()._not()._and( parameter.oclIsTypeOf(OutputPin) ))][parameter.eGet('name')/][/if][/for]
[/template]

[template public printTerminatingNode(aControlFlow : ControlFlow)]
[if (aControlFlow.target.oclIsTypeOf(FlowFinalNode))]    #[aControlFlow.target.name/][elseif (aControlFlow.target.oclIsTypeOf(ActivityFinalNode))]    #[aControlFlow.target.name/][/if]
[/template]

[template public genRequires(anActivityNode : ActivityNode)]
[if anActivityNode.oclIsTypeOf(OpaqueAction)]
[if anActivityNode.oclAsType(OpaqueAction).input->size() > 0]
require_relative('[anActivityNode.oclAsType(OpaqueAction).input->first().type.name/].rb')
[/if]
[if anActivityNode.oclAsType(OpaqueAction).output->size() > 0]
require_relative('[anActivityNode.oclAsType(OpaqueAction).output->first().type.name/].rb')
[/if]
[if anActivityNode.oclAsType(OpaqueAction).output->size() > 0]
[for(anObjectFlow: ObjectFlow | anActivityNode.oclAsType(OpaqueAction).output->first().outgoing)][genRequires(anObjectFlow.target.oclAsType(InputPin).owner.oclAsType(OpaqueAction))/][/for][/if]
[/if]
[for(aControlFlow: ControlFlow | anActivityNode.outgoing)][genRequires(aControlFlow.target)/][/for]
[/template]

[comment genOpaqueActions adds function definitions for all of the opaque actions in the diagram (can actually include manual/external ruby code)/]
[template public genOpaqueActions(anActivityNode : ActivityNode)]
[if anActivityNode.oclIsTypeOf(OpaqueAction)]
[let anOpaqueAction : OpaqueAction = anActivityNode]
def [anOpaqueAction.print()/][if anOpaqueAction.input->size() > 0]([anOpaqueAction.input->first().name.toLower()/])[/if]
  [if anOpaqueAction.validLanguage('ruby')]
  [anOpaqueAction._body->at(anOpaqueAction.language.indexOf('ruby')->first())/]
  [elseif anOpaqueAction.validLanguage('Ruby')]
  [anOpaqueAction._body->at(anOpaqueAction.language.indexOf('Ruby')->first())/]
  [else]
  #TODO fill in function
  [/if]
  [if anOpaqueAction.output->size() > 0]
  [anOpaqueAction.output->first().name.toLower()/] = [anOpaqueAction.output->first().type.name/].new
  [anOpaqueAction.output->first().name.toLower()/]
  [/if]
end

[if anOpaqueAction.output->size() > 0]
[for(anObjectFlow: ObjectFlow | anOpaqueAction.output->first().outgoing)]
[genOpaqueActions(anObjectFlow.target.oclAsType(InputPin).owner.oclAsType(OpaqueAction))/]
[/for]
[/if]
[/let]
[/if]
[for(aControlFlow: ControlFlow | anActivityNode.outgoing)][genOpaqueActions(aControlFlow.target)/][/for]
[/template]

[query public validLanguage(anOpaqueAction : OpaqueAction, languageName : String) : Boolean = 
  anOpaqueAction.language->includes(languageName) and not anOpaqueAction._body->at(anOpaqueAction.language.indexOf(languageName)->first()).oclIsInvalid()
/]

[template public genActivity(anActivityNode : ActivityNode)]
[if anActivityNode.oclIsTypeOf(OpaqueAction)]
[let anOpaqueAction : OpaqueAction = anActivityNode]
[if anOpaqueAction.output->size() > 0]
[anOpaqueAction.output->first().outgoing.oclAsType(ObjectFlow).name.toLower()/] = [/if][anActivityNode.print()/]([if anOpaqueAction.input->size() > 0][anOpaqueAction.input->first().incoming.oclAsType(ObjectFlow).name.toLower()/]
[/if])
[if anOpaqueAction.output->size() > 0]
[for(anObjectFlow: ObjectFlow | anOpaqueAction.output->first().outgoing)][genActivity(anObjectFlow.target.oclAsType(InputPin).owner.oclAsType(OpaqueAction))/]
[/for]
[/if]
[/let]
[/if]
[for(aControlFlow: ControlFlow | anActivityNode.outgoing)][genActivity(aControlFlow.target)/][/for]
[/template]

[template public print(anActivityNode : ActivityNode)]
[anActivityNode.name.replaceAll(' ', '_')/]
[/template]