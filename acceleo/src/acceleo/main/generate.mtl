[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/uml2/4.0.0/UML')]

[import acceleo::files::activity /]

[template public generateElement(element : Element)]
[comment @main/]

[if(element.oclIsTypeOf(Activity))]
  [generateActivity(element.oclAsType(Activity))/]
[elseif(element.oclIsTypeOf(Class))]
  [classFile(element.oclAsType(Class))/]
[/if]
[/template]

[template public classFile(aClass : Class)]
[file (aClass.genName().concat('.rb'), false, 'UTF-8')]
[aClass.genDependencies()/]
[aClass.genComments()/]
[aClass.genClass()/]

  public
  def initialize
  [aClass.attribute.initializeAttributes()/]
  end

  [aClass.genAttributes(VisibilityKind::public)/]
  [aClass.genOperations(VisibilityKind::public)/]

  protected
  [aClass.genAttributes(VisibilityKind::protected)/]
  [aClass.genOperations(VisibilityKind::protected)/]

  private
  [aClass.genAttributes(VisibilityKind::private)/]
  [aClass.genOperations(VisibilityKind::private)/]
end
[/file]

[/template]


[comment General Templates/]

[template public genName(aNamedElement : NamedElement)]
[aNamedElement.name/]
[/template]

[template public genType(aParameter : Parameter) post(trim())]
[if (aParameter.type->isEmpty() = true) ]
Undefined
[elseif (aParameter.type.name->includes('String'))]
String
[elseif (aParameter.type.name->includes('Integer'))]
Fixnum
[elseif (aParameter.type.name->includes('Real'))]
Float
[else]
[aParameter.type.name /]
[/if]
[/template]

[comment Class Name Related Templates/]

[template public genClass(aClass : Class)]
[aClass.genClassName()/][aClass.genParent()/]
[/template]

[template public genClassName(aClass : Class)]
class [aClass.genName().toUpperFirst()/]
[/template]

[template public genParent(aClass : Class)]
[for (aClassifier: Classifier |  aClass.general)] < [aClassifier.name/][/for]
[/template]

[comment Attribute Related Templates/]

[template public genAttributes(aClass : Class, visibilityKind : VisibilityKind) post(trim())]
[aClass.attribute->select(visibility = visibilityKind).genAttribute()->sep('\n')/]
[/template]

[template public genAttribute(anAttribute : Property) post(trim())]
[if (anAttribute.qualifier->isEmpty())]
  [if (anAttribute.isReadOnly = true) ]
    attr_reader :[anAttribute.genName()/]
  [else]
    attr_accessor :[anAttribute.genName()/]
  [/if]
[else]
  [comment create add,get,remove functions for the qualified association hash/]
  def add[anAttribute.type.name/]([anAttribute.qualifier.name/], [anAttribute.type.name.toLowerFirst()/])
    @[anAttribute.type.name.toLowerFirst()/]By[anAttribute.qualifier.name.toUpperFirst()/]['['/][anAttribute.qualifier.name/][']'/]  = [anAttribute.type.name.toLowerFirst()/]
  end

  def remove[anAttribute.type.name/]([anAttribute.qualifier.name/])
    @[anAttribute.type.name.toLowerFirst()/]By[anAttribute.qualifier.name.toUpperFirst()/].delete([anAttribute.qualifier.name/])
  end
  
  def get[anAttribute.type.name/]([anAttribute.qualifier.name/])
    return @[anAttribute.type.name.toLowerFirst()/]By[anAttribute.qualifier.name.toUpperFirst()/]['['/][anAttribute.qualifier.name/][']'/]
  end
[/if]
[/template]

[comment Operation Related Templates/]

[template public genOperations(aClass : Class, visibilityKind : VisibilityKind) post(trim())]
[aClass.ownedOperation->select(visibility = visibilityKind).genOperation()/]
[/template]

[template public genOperation(anOperation : Operation)]
[anOperation.genParameterComments()/]
def [anOperation.genName()/][anOperation.genParameters()/]
  # TODO
[if (anOperation.isVoid() = false)]
  [anOperation.genReturnValue()/]
[/if]
end
[/template]

[template public genParameters(anOperation : Operation) post(trim()) ]
[if (anOperation.hasArgs()) ]
([anOperation.ownedParameter->select(param : Parameter | not (param.direction = ParameterDirectionKind::return)).genOperationParameter()->sep(', ')/])
[/if]
[/template]

[template public genParameterComments(anOperation : Operation) ]

[if (anOperation.hasArgs()) ]
# * *Args* :
[anOperation.ownedParameter->select(param : Parameter | not (param.direction = ParameterDirectionKind::return)).genParameterComment()->sep('\n')/]
[/if]
[if (anOperation.isVoid() = false) ]
# * *Returns* :
[anOperation.ownedParameter->select(param : Parameter | (param.direction = ParameterDirectionKind::return))->first().genParameterComment()/]
[/if]
[/template]

[template public genParameterComment(aParameter : Parameter)]
#   - +[aParameter.genName()/]+ -> [aParameter.genType()/]
[/template]

[template public genOperationParameters(anOperation : Operation)]
[anOperation.ownedParameter->select(param : Parameter | not (param.direction = ParameterDirectionKind::return)).genOperationParameter()->sep(', ')/]
[/template]

[template public genOperationParameter(aParameter : Parameter)]
[aParameter.genName()/]
[/template]

[template public genDefaultType(aParameter : Parameter) post(trim())]
[if (aParameter.type->isEmpty() = true) ] nil
[elseif (aParameter.type.toString().contains('String')) ] ""
[elseif (aParameter.type.toString().contains('Integer')) ] 0
[elseif (aParameter.type.toString().contains('Real')) ] 0.0
[comment for any non-primitive types, just call the class constructor/]
[else] [aParameter.type.name /].new
[/if]
[/template]

[query public hasArgs(anOperation : Operation) : Boolean
  = not (anOperation.ownedParameter->select(param : Parameter | not (param.direction = ParameterDirectionKind::return))->isEmpty())
/]

[query public isVoid(anOperation : Operation) : Boolean
  = anOperation.ownedParameter->select(param : Parameter | (param.direction = ParameterDirectionKind::return))->isEmpty()
/]

[template public genReturnValue(anOperation : Operation) {
  rv : Parameter = anOperation.ownedParameter->select(param : Parameter | (param.direction = ParameterDirectionKind::return))->first();
}
]
[rv.genName()/] = [rv.genDefaultType()/]
[rv.genName()/]
[/template]

[template public initializeAttributes(anAttribute : Property)]
[if (anAttribute.qualifier->size() > 0)]
  @[anAttribute.type.name.toLowerFirst()/]By[anAttribute.qualifier.name.toUpperFirst()/] = Hash.new
[elseif (not anAttribute.type.oclIsUndefined())]
[if (anAttribute.type.toString().contains('String')) ]
  @[anAttribute.genName()/] = ""
[elseif (anAttribute.type.toString().contains('Integer')) ]
  @[anAttribute.genName()/] = 0
[elseif (anAttribute.type.toString().contains('Real')) ]
  @[anAttribute.genName()/] = 0.0
[else]
  @[anAttribute.genName()/] = [anAttribute.type.name/].new
[/if]
[/if]
[/template]

[template public genComments(aClass : Class)]
[for (com : Comment | aClass.ownedComment) separator('\n')]# [com._body.toString() /][/for]
[/template]

[template public genDependencies(aClass : Class)]
[for (dep : Dependency | aClass.clientDependency) separator('\n')]require_relative '../autogen/[dep.supplier.name.concat('.rb') /]'[/for]
[/template]
